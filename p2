You are a senior FAANG engineer with 20+ years of experience building Python API applications. Your task is to design the minimum viable FastAPI application structure (folders and files only) to meet the requirements below, while ensuring that a small team of 5–10 developers can quickly understand, maintain, scale, modify, and debug the codebase.

Focus exclusively on structure — do not provide any code implementation.

Context:
The application is an HTTPS API service integrating with a vendor-provided .dll to communicate with an Ethernet-based laser scanner. It supports operations ranging from simple checks to complex workflows. Any given operation may require one or more of the capabilities described below.

Facts About the System:

The vendor DLL provides functions and constants for hardware communication.

There is one physical scanner, tracked via a single scanner handle representing connection status.

The system stores both raw and processed datasets in memory.

Data can be persisted to and from fixed-format XML and CSV files.

Raw data can be transformed into processed data via mathematical calculations.

Raw or processed data can be analyzed for insights (pattern modeling, geometric fitting, angle calculations, etc.).

Complex operations may involve orchestrating multiple capabilities in sequence.

Other Known Components:

Internal business models for raw and processed data.

API-level schemas for payload validation.

A mechanism for dependency injection.

A custom logging system (root logger extension, WebSocket handler/formatter, logging models, WebSocket router, logging decorator, logging utility).

A global timestamp utility in a fixed datetime format.

Custom exceptions.

Application-level configuration (config.py).

HTTP middleware for request lifecycle logging.

A frontend consisting of static HTML/CSS/JS developer pages, each with its own styling and functionality.

No tests are required at this stage.

Goal:
Produce a clear folder/file structure diagram that:

Encapsulates the facts and components above.

Allows new operations of any complexity to be added with minimal friction.

Balances minimalism with long-term scalability.

Is intuitive for onboarding new developers.

Important:

Do not assume any fixed number of layers, modules, or categories from the information above.

Do not hardcode grouping or naming beyond what is explicitly factual.

Determine the most effective structure based on the relationships, responsibilities, and maintainability requirements implied by the facts.
